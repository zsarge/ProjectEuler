# https://projecteuler.net/problem=12
# Run with: 'python solve12.py'
# using Python 3.6.9
# by Zack Sargent

# Prompt:

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#    1: 1 
#    3: 1,3 
#    6: 1,2,3,6
#   10: 1,2,5,10
#   15: 1,3,5,15
#   21: 1,3,7,21
#   28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# O(sqrt(n)) 
def get_divisors(num):
    count = 2
    i = 2
    while (i ** 2 < num):
        if num % i == 0:
            count += 2
        i += 1
    if i ** 2 == num:
        count += 1
    return count

def get_triangle_number_with_divisors(goal):
    num_of_divisors = 0
    triangle_number = 0
    i = 0
    while num_of_divisors < goal:
        triangle_number += i
        i += 1
        num_of_divisors = get_divisors(triangle_number)
    return triangle_number

print(get_triangle_number_with_divisors(500))
# -> 76576500 (takes about 15 seconds)
